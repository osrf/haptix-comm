// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AplControl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "haptix/comm/AplControl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace haptix {
namespace comm {

namespace {

const ::google::protobuf::Descriptor* Arm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Arm_reflection_ = NULL;
const ::google::protobuf::Descriptor* JointState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JointState_reflection_ = NULL;
const ::google::protobuf::Descriptor* JointCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JointCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* AplRobotState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AplRobotState_reflection_ = NULL;
const ::google::protobuf::Descriptor* AplRobotCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AplRobotCommand_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AplLinkId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AplJointId_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AplActuatorId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AplControl_2eproto() {
  protobuf_AddDesc_AplControl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AplControl.proto");
  GOOGLE_CHECK(file != NULL);
  Arm_descriptor_ = file->message_type(0);
  static const int Arm_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arm, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arm, vel_),
  };
  Arm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Arm_descriptor_,
      Arm::default_instance_,
      Arm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Arm));
  JointState_descriptor_ = file->message_type(1);
  static const int JointState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, effort_),
  };
  JointState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JointState_descriptor_,
      JointState::default_instance_,
      JointState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JointState));
  JointCommand_descriptor_ = file->message_type(2);
  static const int JointCommand_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCommand, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCommand, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCommand, effort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCommand, kp_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCommand, ki_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCommand, kp_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCommand, force_),
  };
  JointCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JointCommand_descriptor_,
      JointCommand::default_instance_,
      JointCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JointCommand));
  AplRobotState_descriptor_ = file->message_type(3);
  static const int AplRobotState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AplRobotState, state_),
  };
  AplRobotState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AplRobotState_descriptor_,
      AplRobotState::default_instance_,
      AplRobotState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AplRobotState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AplRobotState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AplRobotState));
  AplRobotCommand_descriptor_ = file->message_type(4);
  static const int AplRobotCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AplRobotCommand, command_),
  };
  AplRobotCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AplRobotCommand_descriptor_,
      AplRobotCommand::default_instance_,
      AplRobotCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AplRobotCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AplRobotCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AplRobotCommand));
  AplLinkId_descriptor_ = file->enum_type(0);
  AplJointId_descriptor_ = file->enum_type(1);
  AplActuatorId_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AplControl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Arm_descriptor_, &Arm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JointState_descriptor_, &JointState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JointCommand_descriptor_, &JointCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AplRobotState_descriptor_, &AplRobotState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AplRobotCommand_descriptor_, &AplRobotCommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AplControl_2eproto() {
  delete Arm::default_instance_;
  delete Arm_reflection_;
  delete JointState::default_instance_;
  delete JointState_reflection_;
  delete JointCommand::default_instance_;
  delete JointCommand_reflection_;
  delete AplRobotState::default_instance_;
  delete AplRobotState_reflection_;
  delete AplRobotCommand::default_instance_;
  delete AplRobotCommand_reflection_;
}

void protobuf_AddDesc_AplControl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020AplControl.proto\022\013haptix.comm\"\037\n\003Arm\022\013"
    "\n\003pos\030\001 \002(\001\022\013\n\003vel\030\002 \002(\001\"@\n\nJointState\022\020"
    "\n\010position\030\001 \002(\002\022\020\n\010velocity\030\002 \002(\002\022\016\n\006ef"
    "fort\030\003 \002(\002\"\220\001\n\014JointCommand\022\020\n\010position\030"
    "\001 \002(\002\022\020\n\010velocity\030\002 \002(\002\022\016\n\006effort\030\003 \002(\002\022"
    "\023\n\013kp_position\030\004 \002(\002\022\023\n\013ki_position\030\005 \002("
    "\002\022\023\n\013kp_velocity\030\006 \002(\002\022\r\n\005force\030\007 \002(\002\"7\n"
    "\rAplRobotState\022&\n\005state\030\001 \003(\0132\027.haptix.c"
    "omm.JointState\"=\n\017AplRobotCommand\022*\n\007com"
    "mand\030\001 \003(\0132\031.haptix.comm.JointCommand*\277\003"
    "\n\tAplLinkId\022\020\n\014unknown_link\020\000\022\014\n\010WristDe"
    "v\020\001\022\016\n\nWristShell\020\002\022\017\n\013MaleForearm\020\003\022\r\n\t"
    "IndDistal\020\004\022\r\n\tIndMedial\020\005\022\021\n\rIndMetaCar"
    "pal\020\006\022\017\n\013IndProximal\020\007\022\020\n\014LittleDistal\020\010"
    "\022\020\n\014LittleMedial\020\t\022\024\n\020LittleMetaCarpal\020\n"
    "\022\022\n\016LittleProximal\020\013\022\r\n\tMidDistal\020\014\022\r\n\tM"
    "idMedial\020\r\022\021\n\rMidMetaCarpal\020\016\022\017\n\013MidProx"
    "imal\020\017\022\010\n\004Palm\020\020\022\020\n\014PlanetaryAsm\020\021\022\016\n\nRi"
    "ngDistal\020\022\022\016\n\nRingMedial\020\023\022\022\n\016RingMetaCa"
    "rpal\020\024\022\020\n\014RingProximal\020\025\022\014\n\010ThDistal\020\026\022\017"
    "\n\013ThProximal1\020\027\022\017\n\013ThProximal2\020\030\022\r\n\tnum_"
    "links\020\031*\234\003\n\nAplJointId\022\021\n\runknown_joint\020"
    "\000\022\r\n\twrist_rot\020\001\022\r\n\twrist_dev\020\002\022\014\n\010wrist"
    "_fe\020\003\022\r\n\tindex_dip\020\004\022\r\n\tindex_mcp\020\005\022\r\n\ti"
    "ndex_pip\020\006\022\016\n\nlittle_dip\020\007\022\016\n\nlittle_mcp"
    "\020\010\022\016\n\nlittle_pip\020\t\022\016\n\nmiddle_dip\020\n\022\016\n\nmi"
    "ddle_mcp\020\013\022\016\n\nmiddle_pip\020\014\022\023\n\017thumb_cmc_"
    "ab_ad\020\r\022\020\n\014little_ab_ad\020\016\022\016\n\nring_ab_ad\020"
    "\017\022\020\n\014middle_ab_ad\020\020\022\017\n\013index_ab_ad\020\021\022\020\n\014"
    "thumb_cmc_fe\020\022\022\014\n\010ring_dip\020\023\022\014\n\010ring_mcp"
    "\020\024\022\014\n\010ring_pip\020\025\022\r\n\tthumb_mcp\020\026\022\r\n\tthumb"
    "_dip\020\027\022\016\n\nnum_joints\020\030*\201\004\n\rAplActuatorId"
    "\022\024\n\020unknown_actuator\020\000\022\021\n\rwrist_rot_act\020"
    "\001\022\021\n\rwrist_dev_act\020\002\022\020\n\014wrist_fe_act\020\003\022\021"
    "\n\rindex_dip_act\020\004\022\021\n\rindex_mcp_act\020\005\022\021\n\r"
    "index_pip_act\020\006\022\022\n\016little_dip_act\020\007\022\022\n\016l"
    "ittle_mcp_act\020\010\022\022\n\016little_pip_act\020\t\022\022\n\016m"
    "iddle_dip_act\020\n\022\022\n\016middle_mcp_act\020\013\022\022\n\016m"
    "iddle_pip_act\020\014\022\027\n\023thumb_cmc_ab_ad_act\020\r"
    "\022\024\n\020little_ab_ad_act\020\016\022\022\n\016ring_ab_ad_act"
    "\020\017\022\024\n\020middle_ab_ad_act\020\020\022\023\n\017index_ab_ad_"
    "act\020\021\022\024\n\020thumb_cmc_fe_act\020\022\022\020\n\014ring_dip_"
    "act\020\023\022\020\n\014ring_mcp_act\020\024\022\020\n\014ring_pip_act\020"
    "\025\022\021\n\rthumb_mcp_act\020\026\022\021\n\rthumb_dip_act\020\027\022"
    "\021\n\rnum_actuators\020\030", 1778);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AplControl.proto", &protobuf_RegisterTypes);
  Arm::default_instance_ = new Arm();
  JointState::default_instance_ = new JointState();
  JointCommand::default_instance_ = new JointCommand();
  AplRobotState::default_instance_ = new AplRobotState();
  AplRobotCommand::default_instance_ = new AplRobotCommand();
  Arm::default_instance_->InitAsDefaultInstance();
  JointState::default_instance_->InitAsDefaultInstance();
  JointCommand::default_instance_->InitAsDefaultInstance();
  AplRobotState::default_instance_->InitAsDefaultInstance();
  AplRobotCommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AplControl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AplControl_2eproto {
  StaticDescriptorInitializer_AplControl_2eproto() {
    protobuf_AddDesc_AplControl_2eproto();
  }
} static_descriptor_initializer_AplControl_2eproto_;
const ::google::protobuf::EnumDescriptor* AplLinkId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AplLinkId_descriptor_;
}
bool AplLinkId_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AplJointId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AplJointId_descriptor_;
}
bool AplJointId_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AplActuatorId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AplActuatorId_descriptor_;
}
bool AplActuatorId_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Arm::kPosFieldNumber;
const int Arm::kVelFieldNumber;
#endif  // !_MSC_VER

Arm::Arm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Arm::InitAsDefaultInstance() {
}

Arm::Arm(const Arm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Arm::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  vel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Arm::~Arm() {
  SharedDtor();
}

void Arm::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Arm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arm_descriptor_;
}

const Arm& Arm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AplControl_2eproto();
  return *default_instance_;
}

Arm* Arm::default_instance_ = NULL;

Arm* Arm::New() const {
  return new Arm;
}

void Arm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    vel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Arm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_vel;
        break;
      }

      // required double vel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_)));
          set_has_vel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Arm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->pos(), output);
  }

  // required double vel = 2;
  if (has_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->vel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Arm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->pos(), target);
  }

  // required double vel = 2;
  if (has_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->vel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Arm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double pos = 1;
    if (has_pos()) {
      total_size += 1 + 8;
    }

    // required double vel = 2;
    if (has_vel()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Arm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Arm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Arm::MergeFrom(const Arm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_vel()) {
      set_vel(from.vel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Arm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arm::CopyFrom(const Arm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Arm::Swap(Arm* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(vel_, other->vel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Arm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Arm_descriptor_;
  metadata.reflection = Arm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JointState::kPositionFieldNumber;
const int JointState::kVelocityFieldNumber;
const int JointState::kEffortFieldNumber;
#endif  // !_MSC_VER

JointState::JointState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JointState::InitAsDefaultInstance() {
}

JointState::JointState(const JointState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JointState::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  velocity_ = 0;
  effort_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JointState::~JointState() {
  SharedDtor();
}

void JointState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JointState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JointState_descriptor_;
}

const JointState& JointState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AplControl_2eproto();
  return *default_instance_;
}

JointState* JointState::default_instance_ = NULL;

JointState* JointState::New() const {
  return new JointState;
}

void JointState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    velocity_ = 0;
    effort_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JointState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_velocity;
        break;
      }

      // required float velocity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_effort;
        break;
      }

      // required float effort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effort_)));
          set_has_effort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JointState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position(), output);
  }

  // required float velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->velocity(), output);
  }

  // required float effort = 3;
  if (has_effort()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->effort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JointState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->position(), target);
  }

  // required float velocity = 2;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->velocity(), target);
  }

  // required float effort = 3;
  if (has_effort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->effort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JointState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float position = 1;
    if (has_position()) {
      total_size += 1 + 4;
    }

    // required float velocity = 2;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

    // required float effort = 3;
    if (has_effort()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JointState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JointState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JointState::MergeFrom(const JointState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_effort()) {
      set_effort(from.effort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JointState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointState::CopyFrom(const JointState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void JointState::Swap(JointState* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(effort_, other->effort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JointState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JointState_descriptor_;
  metadata.reflection = JointState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JointCommand::kPositionFieldNumber;
const int JointCommand::kVelocityFieldNumber;
const int JointCommand::kEffortFieldNumber;
const int JointCommand::kKpPositionFieldNumber;
const int JointCommand::kKiPositionFieldNumber;
const int JointCommand::kKpVelocityFieldNumber;
const int JointCommand::kForceFieldNumber;
#endif  // !_MSC_VER

JointCommand::JointCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JointCommand::InitAsDefaultInstance() {
}

JointCommand::JointCommand(const JointCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JointCommand::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  velocity_ = 0;
  effort_ = 0;
  kp_position_ = 0;
  ki_position_ = 0;
  kp_velocity_ = 0;
  force_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JointCommand::~JointCommand() {
  SharedDtor();
}

void JointCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JointCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JointCommand_descriptor_;
}

const JointCommand& JointCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AplControl_2eproto();
  return *default_instance_;
}

JointCommand* JointCommand::default_instance_ = NULL;

JointCommand* JointCommand::New() const {
  return new JointCommand;
}

void JointCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    velocity_ = 0;
    effort_ = 0;
    kp_position_ = 0;
    ki_position_ = 0;
    kp_velocity_ = 0;
    force_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JointCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_velocity;
        break;
      }

      // required float velocity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_effort;
        break;
      }

      // required float effort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_effort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &effort_)));
          set_has_effort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_kp_position;
        break;
      }

      // required float kp_position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_kp_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kp_position_)));
          set_has_kp_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_ki_position;
        break;
      }

      // required float ki_position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ki_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ki_position_)));
          set_has_ki_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_kp_velocity;
        break;
      }

      // required float kp_velocity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_kp_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kp_velocity_)));
          set_has_kp_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_force;
        break;
      }

      // required float force = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JointCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position(), output);
  }

  // required float velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->velocity(), output);
  }

  // required float effort = 3;
  if (has_effort()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->effort(), output);
  }

  // required float kp_position = 4;
  if (has_kp_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->kp_position(), output);
  }

  // required float ki_position = 5;
  if (has_ki_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ki_position(), output);
  }

  // required float kp_velocity = 6;
  if (has_kp_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->kp_velocity(), output);
  }

  // required float force = 7;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->force(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JointCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->position(), target);
  }

  // required float velocity = 2;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->velocity(), target);
  }

  // required float effort = 3;
  if (has_effort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->effort(), target);
  }

  // required float kp_position = 4;
  if (has_kp_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->kp_position(), target);
  }

  // required float ki_position = 5;
  if (has_ki_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ki_position(), target);
  }

  // required float kp_velocity = 6;
  if (has_kp_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->kp_velocity(), target);
  }

  // required float force = 7;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->force(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JointCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float position = 1;
    if (has_position()) {
      total_size += 1 + 4;
    }

    // required float velocity = 2;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

    // required float effort = 3;
    if (has_effort()) {
      total_size += 1 + 4;
    }

    // required float kp_position = 4;
    if (has_kp_position()) {
      total_size += 1 + 4;
    }

    // required float ki_position = 5;
    if (has_ki_position()) {
      total_size += 1 + 4;
    }

    // required float kp_velocity = 6;
    if (has_kp_velocity()) {
      total_size += 1 + 4;
    }

    // required float force = 7;
    if (has_force()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JointCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JointCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JointCommand::MergeFrom(const JointCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_effort()) {
      set_effort(from.effort());
    }
    if (from.has_kp_position()) {
      set_kp_position(from.kp_position());
    }
    if (from.has_ki_position()) {
      set_ki_position(from.ki_position());
    }
    if (from.has_kp_velocity()) {
      set_kp_velocity(from.kp_velocity());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JointCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointCommand::CopyFrom(const JointCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void JointCommand::Swap(JointCommand* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(effort_, other->effort_);
    std::swap(kp_position_, other->kp_position_);
    std::swap(ki_position_, other->ki_position_);
    std::swap(kp_velocity_, other->kp_velocity_);
    std::swap(force_, other->force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JointCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JointCommand_descriptor_;
  metadata.reflection = JointCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AplRobotState::kStateFieldNumber;
#endif  // !_MSC_VER

AplRobotState::AplRobotState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AplRobotState::InitAsDefaultInstance() {
}

AplRobotState::AplRobotState(const AplRobotState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AplRobotState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AplRobotState::~AplRobotState() {
  SharedDtor();
}

void AplRobotState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AplRobotState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AplRobotState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AplRobotState_descriptor_;
}

const AplRobotState& AplRobotState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AplControl_2eproto();
  return *default_instance_;
}

AplRobotState* AplRobotState::default_instance_ = NULL;

AplRobotState* AplRobotState::New() const {
  return new AplRobotState;
}

void AplRobotState::Clear() {
  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AplRobotState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .haptix.comm.JointState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AplRobotState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .haptix.comm.JointState state = 1;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AplRobotState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .haptix.comm.JointState state = 1;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AplRobotState::ByteSize() const {
  int total_size = 0;

  // repeated .haptix.comm.JointState state = 1;
  total_size += 1 * this->state_size();
  for (int i = 0; i < this->state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AplRobotState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AplRobotState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AplRobotState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AplRobotState::MergeFrom(const AplRobotState& from) {
  GOOGLE_CHECK_NE(&from, this);
  state_.MergeFrom(from.state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AplRobotState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AplRobotState::CopyFrom(const AplRobotState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AplRobotState::IsInitialized() const {

  for (int i = 0; i < state_size(); i++) {
    if (!this->state(i).IsInitialized()) return false;
  }
  return true;
}

void AplRobotState::Swap(AplRobotState* other) {
  if (other != this) {
    state_.Swap(&other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AplRobotState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AplRobotState_descriptor_;
  metadata.reflection = AplRobotState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AplRobotCommand::kCommandFieldNumber;
#endif  // !_MSC_VER

AplRobotCommand::AplRobotCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AplRobotCommand::InitAsDefaultInstance() {
}

AplRobotCommand::AplRobotCommand(const AplRobotCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AplRobotCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AplRobotCommand::~AplRobotCommand() {
  SharedDtor();
}

void AplRobotCommand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AplRobotCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AplRobotCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AplRobotCommand_descriptor_;
}

const AplRobotCommand& AplRobotCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AplControl_2eproto();
  return *default_instance_;
}

AplRobotCommand* AplRobotCommand::default_instance_ = NULL;

AplRobotCommand* AplRobotCommand::New() const {
  return new AplRobotCommand;
}

void AplRobotCommand::Clear() {
  command_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AplRobotCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .haptix.comm.JointCommand command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_command;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AplRobotCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .haptix.comm.JointCommand command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->command(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AplRobotCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .haptix.comm.JointCommand command = 1;
  for (int i = 0; i < this->command_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->command(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AplRobotCommand::ByteSize() const {
  int total_size = 0;

  // repeated .haptix.comm.JointCommand command = 1;
  total_size += 1 * this->command_size();
  for (int i = 0; i < this->command_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->command(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AplRobotCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AplRobotCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AplRobotCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AplRobotCommand::MergeFrom(const AplRobotCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  command_.MergeFrom(from.command_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AplRobotCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AplRobotCommand::CopyFrom(const AplRobotCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AplRobotCommand::IsInitialized() const {

  for (int i = 0; i < command_size(); i++) {
    if (!this->command(i).IsInitialized()) return false;
  }
  return true;
}

void AplRobotCommand::Swap(AplRobotCommand* other) {
  if (other != this) {
    command_.Swap(&other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AplRobotCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AplRobotCommand_descriptor_;
  metadata.reflection = AplRobotCommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace comm
}  // namespace haptix

// @@protoc_insertion_point(global_scope)
