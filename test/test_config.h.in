#define PROJECT_SOURCE_PATH "${PROJECT_SOURCE_DIR}"

  /// \brief create a new process and run command on it. This function is
  /// implementing the creation of a new process on both Linux (fork) and
  /// Windows (CreateProcess) and the execution of the command provided.
  /// \param[in] command The full system path to the binary to run into the
  /// new process.
  /// \return On success, the PID of the child process is returned in the
  /// parent, an 0 is returned in the child. On failure, -1 is returned in the
  /// parent and no child process is created.
  forkHandlerType forkAndRun(const char *_command, const char *_partition)
  {
#ifdef _WIN32
    STARTUPINFO info= {sizeof(info)};
    PROCESS_INFORMATION processInfo;

    char cmd[500];
    strcpy(cmd, _command);
    strcat(cmd, " ");
    strcat(cmd, _partition);

    if (!CreateProcess(NULL, const_cast<LPSTR>(cmd), NULL, NULL, TRUE, 0, NULL, NULL, &info, &processInfo))
    {
      std::cerr << "CreateProcess call failed" << std::endl;
    }

    return processInfo;
#else
    pid_t pid = fork();

    if (pid == 0)
    {
      if (execl(_command, _command, _partition, reinterpret_cast<char *>(0)) == -1)
        std::cerr << "Error running execl call: " << _command << std::endl;
    }

    return pid;
#endif
  }

  /// \brief Wait for the end of a process and handle the termination
  /// \param[in] pi Process handler of the process to wait for
  /// (PROCESS_INFORMATION in windows or forkHandlerType in UNIX).
  void waitAndCleanupFork(const forkHandlerType pi)
  {
#ifdef _WIN32
    // Wait until child process exits.
    WaitForSingleObject(pi.hProcess, INFINITE);

    // Close process and thread handler.
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);
#else
    // Wait for the child process to return.
    int status;
    waitpid(pi, &status, 0);
    if (status == -1)
      std::cerr << "Error while running waitpid" << std::endl;
#endif
  }
